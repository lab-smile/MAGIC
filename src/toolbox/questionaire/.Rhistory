plsMSE
xtest = as.matrix(dataTest[,1:204])
ytest = as.numeric(dataTest[,205])
## CV curve for ridge regression
RidgeCV = cv.glmnet(x = x, y = y, alpha = 0)
## Find ridge regression estimates
Ridge = glmnet(x = x, y = y, alpha = 0, lambda = RidgeCV$lambda.min)
predictRidge = predict.glmnet(Ridge, newx=xtest)
RidgeMSE = mean((ytest - as.vector(predictRidge))^2);
## CV curve for lasso
LassoCV = cv.glmnet(x = x, y = y, alpha = 1)
## Lasso estimates
Lasso = glmnet(x = x, y = y, alpha = 1, lambda = LassoCV$lambda.min)
predictLasso = predict.glmnet(Lasso, newx=xtest)
LassoMSE = mean((ytest - as.vector(predictLasso))^2);
## PCR with cross validation
PCRCV <- pcr(y~x, scale=TRUE, validation="CV")
#summary(PCRCV)
# lowest adjuseted RMSEP is 16
pcrr_pred <- predict(PCRCV, xtest, ncomp=16)
pcrrMSE = mean((ytest - as.vector(pcr_pred))^2);
## PCR with 95% variation from summary(PCRCV) is 39 comps
pcrv_pred <- predict(PCRCV, xtest, ncomp=39)
pcrvMSE = mean((ytest - as.vector(pcr_pred))^2);
## Partial Least Squares
pls = plsr(y ~ x, validation = "CV", scale=TRUE)
pls_pred <- predict(pls, xtest, ncomp = 4)
plsMSE = mean((ytest - as.vector(pcr_pred))^2);
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(mvtnorm)
library(glmnet)
library(spls)
library(leaps)
library(pls)
library(tidyverse)
library(e1071)
library(class)
library(MASS)
softmax <- function(x, lambda){
max(abs(x) - lambda, 0)*sign(x)
}
data = read.csv("Problem1.csv")
lambda = 0.5
X = as.matrix(data[,1:52])
y = as.matrix(data$y)
beta_t = as.matrix(rnorm(52))
r_0 = as.matrix(rep(0,133))
r = data$y - X%*%beta_t
while (sum(abs(r-r_0)) > .5e-7){
r_0 = r
for (j in 1:52){
r_j = r + as.matrix(beta_t[j,]*X[,j])
beta_plus = softmax((t(r_j)%*%X[,j])/(t(X[,j])%*%X[,j]), lambda)
beta_t[j] = as.numeric(beta_plus)
r = r_j - as.matrix(beta_t[j,]*X[,j])
}
}
beta_t
Lasso.glm = glmnet(X, y, alpha = 1, intercept = FALSE, lambda = 0.5)
beta.glm = as.matrix(Lasso.glm[["beta"]]); beta.glm
all_coefs = matrix(nrow = 52, ncol = 21)
lambda = NULL
iter = 1
for (lambda_i in seq(0,2,0.1)){
lambda = c(lambda, rep(lambda_i, 52))
beta_t = as.matrix(rnorm(52))
r_0 = as.matrix(rep(0,133))
r = data$y - X%*%beta_t
while (sum(abs(r-r_0)) > .5e-7){
r_0 = r
for (j in 1:52){
r_j = r + as.matrix(beta_t[j,]*X[,j])
beta_plus = softmax((t(r_j)%*%X[,j])/(t(X[,j])%*%X[,j]), lambda_i)
beta_t[j] = as.numeric(beta_plus)
r = r_j - as.matrix(beta_t[j,]*X[,j])
}
}
all_coefs[,iter] = as.vector(beta_t)
iter = iter + 1
}
plotme = data.frame(Coefficients = as.vector(all_coefs), coef = rep(seq(1,52),21), lambda = lambda)
ggplot(plotme, aes(lambda, Coefficients, color = factor(coef))) +
geom_line() +
scale_x_log10() +
xlab("Log Lambda") +
ggtitle("Lasso Estimates")
rm(list=ls())
load(file="Problem2train.dat")
load(file="Problem2test.dat")
x = as.matrix(dataTrain[,1:204])
y = as.numeric(dataTrain[,205])
xtest = as.matrix(dataTest[,1:204])
ytest = as.numeric(dataTest[,205])
heatmap = matrix(nrow = dim(x)[2], ncol = dim(x)[2])
for (i in 1:dim(x)[2]){
for (j in i:dim(x)[2]){
heatmap[i,j] = cor(x[,i], x[,j])
heatmap[j,i] = heatmap[i,j]
}
}
image(heatmap)
## Plot of variation explained for the last data set looked at in the simulation above
pca = prcomp(x)
plot(pca, main="Variation explained by each PC")
axis(1, at=seq(0.5, 11.5, by=1.2), labels=paste("PC", 1:10), las=2)
xtest = as.matrix(dataTest[,1:204])
ytest = as.numeric(dataTest[,205])
## CV curve for ridge regression
RidgeCV = cv.glmnet(x = x, y = y, alpha = 0)
## Find ridge regression estimates
Ridge = glmnet(x = x, y = y, alpha = 0, lambda = RidgeCV$lambda.min)
predictRidge = predict.glmnet(Ridge, newx=xtest)
RidgeMSE = mean((ytest - as.vector(predictRidge))^2);
## CV curve for lasso
LassoCV = cv.glmnet(x = x, y = y, alpha = 1)
## Lasso estimates
Lasso = glmnet(x = x, y = y, alpha = 1, lambda = LassoCV$lambda.min)
predictLasso = predict.glmnet(Lasso, newx=xtest)
LassoMSE = mean((ytest - as.vector(predictLasso))^2);
## PCR with cross validation
PCRCV <- pcr(y~x, scale=TRUE, validation="CV")
#summary(PCRCV)
# lowest adjuseted RMSEP is 16
pcrr_pred <- predict(PCRCV, xtest, ncomp=16)
pcrrMSE = mean((ytest - as.vector(pcr_pred))^2);
xtest = as.matrix(dataTest[,1:204])
ytest = as.numeric(dataTest[,205])
## CV curve for ridge regression
RidgeCV = cv.glmnet(x = x, y = y, alpha = 0)
## Find ridge regression estimates
Ridge = glmnet(x = x, y = y, alpha = 0, lambda = RidgeCV$lambda.min)
predictRidge = predict.glmnet(Ridge, newx=xtest)
RidgeMSE = mean((ytest - as.vector(predictRidge))^2);
## CV curve for lasso
LassoCV = cv.glmnet(x = x, y = y, alpha = 1)
## Lasso estimates
Lasso = glmnet(x = x, y = y, alpha = 1, lambda = LassoCV$lambda.min)
predictLasso = predict.glmnet(Lasso, newx=xtest)
LassoMSE = mean((ytest - as.vector(predictLasso))^2);
## PCR with cross validation
PCRCV <- pcr(y~x, scale=TRUE, validation="CV")
#summary(PCRCV)
# lowest adjuseted RMSEP is 16
pcrcv_pred <- predict(PCRCV, xtest, ncomp=16)
pcrcvMSE = mean((ytest - as.vector(pcrcv_pred))^2);
## PCR with 95% variation from summary(PCRCV) is 39 comps
pcrv_pred <- predict(PCRCV, xtest, ncomp=39)
pcrvMSE = mean((ytest - as.vector(pcrv_pred))^2);
## Partial Least Squares
pls = plsr(y ~ x, validation = "CV", scale=TRUE)
pls_pred <- predict(pls, xtest, ncomp = 4)
plsMSE = mean((ytest - as.vector(pls_pred))^2);
LassoMSE
pcrcvMSE
pcrvMSE
plsMSE
RidgeMSE
qtukey(0.95, 3, 9)
sqrt(5.15)*(1/sqrt(2))
1.604681*3.948492
10.3
10.3/3
sqrt(3.4333)
knitr::opts_chunk$set(echo = TRUE)
cook <- read.csv("cook.csv", header = TRUE)
rm(list = ls())
cook <- read.csv("cook.csv", header = TRUE)
cook$pot <- as.factor(cook$pot)
cook$dish <- as.factor(cook$dish)
head(cook)
View(cook)
head(c(cook[1:2],cook[13:14], cook[25:26]))
(cook[1:2],cook[13:14], cook[25:26])
cook[1:2]
cook[,1:2]
cook[c(1,2,13,14,25,26),]
cook[c(1,2,17,18,33,34),]
nsdish <- aggregate(cook$dish, by=data.frame(cook$pot),
FUN=length)$x
nspot <- aggregate(cook$pot, by=data.frame(cook$dish),
FUN=length)$x
ybarsdish <- aggregate(cook$dish, by=data.frame(cook$pot),
FUN=mean)$x
ybarsdish <- aggregate(cook$dish, by=data.frame(cook$pot),
FUN=mean)$x
nsdish <- aggregate(cook$iron, by=data.frame(cook$pot),
FUN=length)$x
nspot <- aggregate(cook$iron, by=data.frame(cook$dish),
FUN=length)$x
ybarsdish <- aggregate(cook$iron, by=data.frame(cook$pot),
FUN=mean)$x
ybarsdish <- aggregate(cook$iron, by=data.frame(cook$dish),
FUN=mean)$x
ybarspot <- aggregate(cook$iron, by=data.frame(cook$pot),
FUN=mean)$x
sdsdish <- aggregate(cook$iron, by=data.frame(cook$dish),
FUN=sd)$x
sdspot <- aggregate(cook$iron, by=data.frame(cook$pot),
FUN=sd)$x
data.frame(Agent=levels(c(cook$pot, cook$dish)),Mean=c(ybarsdish,ybarpot),SD=round(c(sdsdish, sdspot),digits=2), Sample_Size = c(nsdish, nspot))
data.frame(Agent=levels(c(cook$pot, cook$dish)),Mean=c(ybarsdish,ybarspot),SD=round(c(sdsdish, sdspot),digits=2), Sample_Size = c(nsdish, nspot))
c(cook$pot, cook$dish)
data.frame(Agent=levels(6), Mean=c(ybarsdish,ybarspot),SD=round(c(sdsdish, sdspot),digits=2), Sample_Size = c(nsdish, nspot))
c(ybarsdish,ybarspot)
c(sdsdish, sdspot)
data.frame(Agent=levels(1:6), Mean=c(ybarsdish,ybarspot),SD=round(c(sdsdish, sdspot),digits=2), Sample_Size = c(nsdish, nspot))
data.frame(Agent=1:6, Mean=c(ybarsdish,ybarspot),SD=round(c(sdsdish, sdspot),digits=2), Sample_Size = c(nsdish, nspot))
data.frame(factors=c("meat", "legumes", "vegetables", "aluminium", "clay", "iron"), Mean=c(ybarsdish,ybarspot),SD=round(c(sdsdish, sdspot),digits=2), Sample_Size = c(nsdish, nspot))
View(cook)
aggregate(cook$iron, by=data.frame(cook$dish == 1), FUN=sum)$x
91.48/12
91.48/36
sum(cook$iron[1:12])
sum(cook$iron[1:12])/12
sum(cook$iron[13:24])/12
sum(cook$iron[1:4], cook$iron[13:16], cook$iron[25:28])
sum(cook$iron[1:4], cook$iron[13:16], cook$iron[25:28])/12
sum(cook$iron[5:8], cook$iron[17:20], cook$iron[29:32])/12
nsdish <- aggregate(cook$iron, by=data.frame(cook$dish),
FUN=length)$x
nspot <- aggregate(cook$iron, by=data.frame(cook$pot),
FUN=length)$x
ybarsdish <- aggregate(cook$iron, by=data.frame(cook$dish),
FUN=mean)$x
ybarspot <- aggregate(cook$iron, by=data.frame(cook$pot),
FUN=mean)$x
sdsdish <- aggregate(cook$iron, by=data.frame(cook$dish),
FUN=sd)$x
sdspot <- aggregate(cook$iron, by=data.frame(cook$pot),
FUN=sd)$x
data.frame(factors=c("legumes", "meat", "vegetables", "aluminium", "clay", "iron"), Mean=c(ybarsdish,ybarspot),SD=round(c(sdsdish, sdspot),digits=2), Sample_Size = c(nsdish, nspot))
ns <- rep(4,9)
ybars <- c(mean(cook$iron[1:4]), mean(cook$iron[5:8]), mean(cook$iron[9:12]), mean(cook$iron[13:16]), mean(cook$iron[17:20]), mean(cook$iron[21:24]), mean(cook$iron[25:28]), mean(cook$iron[29:32]), mean(cook$iron[33:36]))
sds <- ybars <- c(sd(cook$iron[1:4]), sd(cook$iron[5:8]), sd(cook$iron[9:12]), sd(cook$iron[13:16]), sd(cook$iron[17:20]), sd(cook$iron[21:24]), sd(cook$iron[25:28]), sd(cook$iron[29:32]), sd(cook$iron[33:36]))
data.frame(factors=c("Aluminum - Meat", "Clay - Meat", "Iron - Meat", "Aluminum - Legumes", "Clay - Legumes", "Iron - Legumes", "Aluminum - Vegetables", "Clay - Vegetables", "Iron - Vegetables"), Mean=ybars,SD=round(sds,digits=2), Sample_Size = ns)
cook$iron[1:4]
sum(cook$iron[1:4])
8.23/4
ybars <- c(mean(cook$iron[1:4]), mean(cook$iron[5:8]), mean(cook$iron[9:12]), mean(cook$iron[13:16]), mean(cook$iron[17:20]), mean(cook$iron[21:24]), mean(cook$iron[25:28]), mean(cook$iron[29:32]), mean(cook$iron[33:36]))
sds <- ybars <- c(sd(cook$iron[1:4]), sd(cook$iron[5:8]), sd(cook$iron[9:12]), sd(cook$iron[13:16]), sd(cook$iron[17:20]), sd(cook$iron[21:24]), sd(cook$iron[25:28]), sd(cook$iron[29:32]), sd(cook$iron[33:36]))
data.frame(factors=c("Aluminum - Meat", "Clay - Meat", "Iron - Meat", "Aluminum - Legumes", "Clay - Legumes", "Iron - Legumes", "Aluminum - Vegetables", "Clay - Vegetables", "Iron - Vegetables"), Mean=ybars,SD=round(sds,digits=2), Sample_Size = ns)
rm(list = ls())
cook <- read.csv("cook.csv", header = TRUE)
cook$pot <- as.factor(cook$pot)
cook$dish <- as.factor(cook$dish)
cook[c(1,2,17,18,33,34),]
ns <- rep(4,9)
ybars <- c(mean(cook$iron[1:4]), mean(cook$iron[5:8]), mean(cook$iron[9:12]), mean(cook$iron[13:16]), mean(cook$iron[17:20]), mean(cook$iron[21:24]), mean(cook$iron[25:28]), mean(cook$iron[29:32]), mean(cook$iron[33:36]))
sds <- ybars <- c(sd(cook$iron[1:4]), sd(cook$iron[5:8]), sd(cook$iron[9:12]), sd(cook$iron[13:16]), sd(cook$iron[17:20]), sd(cook$iron[21:24]), sd(cook$iron[25:28]), sd(cook$iron[29:32]), sd(cook$iron[33:36]))
ns <- rep(4,9)
ybars <- c(mean(cook$iron[1:4]), mean(cook$iron[5:8]), mean(cook$iron[9:12]), mean(cook$iron[13:16]), mean(cook$iron[17:20]), mean(cook$iron[21:24]), mean(cook$iron[25:28]), mean(cook$iron[29:32]), mean(cook$iron[33:36]))
sds <- c(sd(cook$iron[1:4]), sd(cook$iron[5:8]), sd(cook$iron[9:12]), sd(cook$iron[13:16]), sd(cook$iron[17:20]), sd(cook$iron[21:24]), sd(cook$iron[25:28]), sd(cook$iron[29:32]), sd(cook$iron[33:36]))
data.frame(factors=c("Aluminum - Meat", "Clay - Meat", "Iron - Meat", "Aluminum - Legumes", "Clay - Legumes", "Iron - Legumes", "Aluminum - Vegetables", "Clay - Vegetables", "Iron - Vegetables"), Mean=ybars,SD=round(sds,digits=2), Sample_Size = ns)
plot(iron ~ pot*dish, data = cook)
interaction.plot(dish, pot, response=iron, data=cook)
interaction.plot(cook$dish, cook$pot, response=cook$iron)
interaction.plot(cook$pot, cook$dish, response=cook$iron)
plot(iron ~ pot*dish, data = cook)
interaction.plot(cook$dish, cook$pot, response=cook$iron)
interaction.plot(cook$pot, cook$dish, response=cook$iron)
sum(ybars)
sum(ybars)/9
2.0575 + 2.1775 + 4.6800
8.915/3
2.3300 + 2.4725 + 3.6700
8.4725/3
1.2325 + 1.4600 + 2.7900
5.4825/3
2.0575 + 2.3300 + 1.2325
5.62/3
2.1775 + 2.4725 + 1.4600
6.11/3
4.6800+ 3.6700+2.7900
11.14/3
sum(ybars)/9
2.541111+ 3.713333 + 2.971667
2.971667-2.541111
2.824167-2.541111
1.8275-2.541111
1.873333 - 2.541111
2.036667 - 2.541111
3.713333 - 2.541111
2.541111 + 0.43 + 1.172
2.541111+ 1.172222 + 0.430556
knitr::opts_chunk$set(echo = TRUE)
q4 <- aov(iron ~ pot + dish, data = cook)
summary(q4)
knitr::opts_chunk$set(echo = TRUE)
q4 <- aov(iron ~ pot*dish, data = cook)
summary(q4)
0.66/0.135
qf(4.88889, 4,27)
pf(4.88889, 4,27)
pf(4.88889, 4,27, lower.tail = TRUE)
pf(4.88889, 4,27, lower.tail = FALSE)
1-pf(4.88889, 4, 27)
pf(4.88889, 4,27, lower.tail = FALSE)
qf(0.9,8,27)
1.909087*8
View(cook)
4.6800 - 3.6700
0.135/2
sqrt(15.2727)*sqrt(0.0675)
1.01 - 1.015336
1.01 + 1.015336
ybars
contrast = c(0,0,1,0,0,-1,0,0,0)
mse = 0.135
#Calculate critical constant
scheffe.critical = 8*qf(0.9, 8, 27)
#calculate estimate
scheffe.estimate_d1 = sum(ybars*contrast)
#calculate variance
scheffe.variance_d1 = mse/4*(sum(contrast^2))
#calculate allowance
scheffe.allowance_d1 = sqrt(scheffe.critical)*sqrt(scheffe.variance_d1)
#construct interval
scheffe.interval_d1 = c(scheffe.estimate_d1 - scheffe.allowance_d1, scheffe.estimate_d1 + scheffe.allowance_d1); scheffe.interval_d1
contrast = c(0,0,1,0,0,0,0,0,-1)
mse = 0.135
#Calculate critical constant
scheffe.critical = 8*qf(0.9, 8, 27)
#calculate estimate
scheffe.estimate_d1 = sum(ybars*contrast)
#calculate variance
scheffe.variance_d1 = mse/4*(sum(contrast^2))
#calculate allowance
scheffe.allowance_d1 = sqrt(scheffe.critical)*sqrt(scheffe.variance_d1)
#construct interval
scheffe.interval_d1 = c(scheffe.estimate_d1 - scheffe.allowance_d1, scheffe.estimate_d1 + scheffe.allowance_d1); scheffe.interval_d1
contrast = c(0,0,0,0,0,1,0,0,-1)
mse = 0.135
#Calculate critical constant
scheffe.critical = 8*qf(0.9, 8, 27)
#calculate estimate
scheffe.estimate_d1 = sum(ybars*contrast)
#calculate variance
scheffe.variance_d1 = mse/4*(sum(contrast^2))
#calculate allowance
scheffe.allowance_d1 = sqrt(scheffe.critical)*sqrt(scheffe.variance_d1)
#construct interval
scheffe.interval_d1 = c(scheffe.estimate_d1 - scheffe.allowance_d1, scheffe.estimate_d1 + scheffe.allowance_d1); scheffe.interval_d1
contrast = c(-1/6,-1/6,1/3,-1/6,-1/6,1/3,-1/6,-1/6,1/3)
mse = 0.135
#Calculate critical constant
scheffe.critical = 8*qf(0.9, 8, 27)
#calculate estimate
scheffe.estimate_d1 = sum(ybars*contrast)
#calculate variance
scheffe.variance_d1 = mse/4*(sum(contrast^2))
#calculate allowance
scheffe.allowance_d1 = sqrt(scheffe.critical)*sqrt(scheffe.variance_d1)
#construct interval
scheffe.interval_d1 = c(scheffe.estimate_d1 - scheffe.allowance_d1, scheffe.estimate_d1 + scheffe.allowance_d1); scheffe.interval_d1
contrast = c(0,0,1,0,0,-1,0,0,0)
mse = 0.135
#Calculate critical constant
scheffe.critical = 8*qf(0.9, 8, 27)
#calculate estimate
scheffe.estimate_l1 = sum(ybars*contrast)
#calculate variance
scheffe.variance_l1 = mse/4*(sum(contrast^2))
#calculate allowance
scheffe.allowance_l1 = sqrt(scheffe.critical)*sqrt(scheffe.variance_l1)
#construct interval
scheffe.interval_l1 = c(scheffe.estimate_l1 - scheffe.allowance_l1, scheffe.estimate_l1 + scheffe.allowance_l1); scheffe.interval_l1
contrast = c(0,0,1,0,0,0,0,0,-1)
mse = 0.135
#Calculate critical constant
scheffe.critical = 8*qf(0.9, 8, 27)
#calculate estimate
scheffe.estimate_l2 = sum(ybars*contrast)
#calculate variance
scheffe.variance_l2 = mse/4*(sum(contrast^2))
#calculate allowance
scheffe.allowance_l2 = sqrt(scheffe.critical)*sqrt(scheffe.variance_l2)
#construct interval
scheffe.interval_l2 = c(scheffe.estimate_l2 - scheffe.allowance_l2, scheffe.estimate_l2 + scheffe.allowance_l2); scheffe.interval_l2
contrast = c(0,0,0,0,0,1,0,0,-1)
mse = 0.135
#Calculate critical constant
scheffe.critical = 8*qf(0.9, 8, 27)
#calculate estimate
scheffe.estimate_l3 = sum(ybars*contrast)
#calculate variance
scheffe.variance_l3 = mse/4*(sum(contrast^2))
#calculate allowance
scheffe.allowance_l3 = sqrt(scheffe.critical)*sqrt(scheffe.variance_l3)
#construct interval
scheffe.interval_l3 = c(scheffe.estimate_l3 - scheffe.allowance_l3, scheffe.estimate_l3 + scheffe.allowance_l3); scheffe.interval_l3
contrast = c(-1/6,-1/6,1/3,-1/6,-1/6,1/3,-1/6,-1/6,1/3)
mse = 0.135
#Calculate critical constant
scheffe.critical = 8*qf(0.9, 8, 27)
#calculate estimate
scheffe.estimate_l4 = sum(ybars*contrast)
#calculate variance
scheffe.variance_l4 = mse/4*(sum(contrast^2))
#calculate allowance
scheffe.allowance_l4 = sqrt(scheffe.critical)*sqrt(scheffe.variance_l4)
#construct interval
scheffe.interval_l4 = c(scheffe.estimate_l4 - scheffe.allowance_l4, scheffe.estimate_l4 + scheffe.allowance_l4); scheffe.interval_l4
sqrt(0.0675)
sqrt(0.016875)
ybars
contrast = c(-1/2,-1.2,1,0,0,0,0,0,0)
mse = 0.135
#Calculate critical constant
scheffe.critical = 8*qf(0.9, 8, 27)
#calculate estimate
scheffe.estimate_d1 = sum(ybars*contrast)
#calculate variance
scheffe.variance_d1 = mse/4*(sum(contrast^2))
#calculate allowance
scheffe.allowance_d1 = sqrt(scheffe.critical)*sqrt(scheffe.variance_d1)
#construct interval
scheffe.interval_d1 = c(scheffe.estimate_d1 - scheffe.allowance_d1, scheffe.estimate_d1 + scheffe.allowance_d1); scheffe.interval_d1
contrast = c(0,0,0,-1/2,-1/2,1,0,0,0)
mse = 0.135
#Calculate critical constant
scheffe.critical = 8*qf(0.9, 8, 27)
#calculate estimate
scheffe.estimate_d2 = sum(ybars*contrast)
#calculate variance
scheffe.variance_d2 = mse/4*(sum(contrast^2))
#calculate allowance
scheffe.allowance_d2 = sqrt(scheffe.critical)*sqrt(scheffe.variance_d2)
#construct interval
scheffe.interval_d2 = c(scheffe.estimate_d2 - scheffe.allowance_d2, scheffe.estimate_d2 + scheffe.allowance_d2); scheffe.interval_d2
contrast = c(0,0,0,0,0,0,-1/2,-1/2,1)
mse = 0.135
#Calculate critical constant
scheffe.critical = 8*qf(0.9, 8, 27)
#calculate estimate
scheffe.estimate_d3 = sum(ybars*contrast)
#calculate variance
scheffe.variance_d3 = mse/4*(sum(contrast^2))
#calculate allowance
scheffe.allowance_d3 = sqrt(scheffe.critical)*sqrt(scheffe.variance_d3)
#construct interval
scheffe.interval_d3 = c(scheffe.estimate_d3 - scheffe.allowance_d3, scheffe.estimate_d3 + scheffe.allowance_d3); scheffe.interval_d3
sqrt(0.907875)
sqrt(0.050625)
contrast = c(-1/2,-1/2,1,0,0,0,0,0,0)
mse = 0.135
#Calculate critical constant
scheffe.critical = 8*qf(0.9, 8, 27)
#calculate estimate
scheffe.estimate_d1 = sum(ybars*contrast)
#calculate variance
scheffe.variance_d1 = mse/4*(sum(contrast^2))
#calculate allowance
scheffe.allowance_d1 = sqrt(scheffe.critical)*sqrt(scheffe.variance_d1)
#construct interval
scheffe.interval_d1 = c(scheffe.estimate_d1 - scheffe.allowance_d1, scheffe.estimate_d1 + scheffe.allowance_d1); scheffe.interval_d1
rm(list = ls())
setwd("C:/Users/Simon Kato/Desktop/Research/REU/scripts/questionaire")
library(ggplot2)
library(plyr)
library(tidyverse)
library(scales)
GResults <- read.csv("GeneralResults.csv")
DResults <- read.csv("DoctorResults.csv")
low = c(1,2,3,4,5,6,7,11,12,16) #Indexes of the patients with core:tissue at risk <= 0.4
high = c(8,9,10,13,14,15,17,18,19,20)#Indexes of the patients with core:tissue at risk > 0.4
DLow = DResults[low,]
DHigh = DResults[high,]
### Question 1 Plots
# creating data frame
Q1_gen <- data.frame(
votes = c(sum(1*GResults$Q1_real == 0), sum(1*GResults$Q1_real == 1), sum(1*GResults$Q1_predicted == 0), sum(1*GResults$Q1_predicted == 1)),
imageType = c("Real CTP", "Real CTP", "Synthetic CTP", "Synthetic CTP"),
voted = c("not real", "is real", "not real" , "is real"))
Q1_d1 <- data.frame(
votes = c(sum(1*DResults$d1_q1_real == 0), sum(1*DResults$d1_q1_real == 1), sum(1*DResults$d1_q1_pred == 0), sum(1*DResults$d1_q1_pred == 1)),
imageType = c("Real CTP", "Real CTP", "Synthetic CTP", "Synthetic CTP"),
voted = c("not real", "is real", "not real" , "is real"))
Q1_d2 <- data.frame(
votes = c(sum(1*DResults$d2_q1_real == 0), sum(1*DResults$d2_q1_real == 1), sum(1*DResults$d2_q1_pred == 0), sum(1*DResults$d2_q1_pred == 1)),
imageType = c("Real CTP", "Real CTP", "Synthetic CTP", "Synthetic CTP"),
voted = c("not real", "is real", "not real" , "is real"))
Q1_d3 <- data.frame(
votes = c(sum(1*DResults$d3_q1_real == 0), sum(1*DResults$d3_q1_real == 1), sum(1*DResults$d3_q1_pred == 0), sum(1*DResults$d3_q1_pred == 1)),
imageType = c("Real CTP", "Real CTP", "Synthetic CTP", "Synthetic CTP"),
voted = c("not real", "is real", "not real" , "is real"))
write.csv(Q1_d1,"Q1_d1.csv", row.names = TRUE)
Q1_d2 <- data.frame(
votes = c(sum(1*DResults$d2_q1_real == 0), sum(1*DResults$d2_q1_real == 1), sum(1*DResults$d2_q1_pred == 0), sum(1*DResults$d2_q1_pred == 1)),
imageType = c("Real CTP", "Real CTP", "Synthetic CTP", "Synthetic CTP"),
voted = c("not real", "is real", "not real" , "is real"))
write.csv(Q1_d2,"Q1_d2.csv", row.names = TRUE)
Q1_d3 <- data.frame(
votes = c(sum(1*DResults$d3_q1_real == 0), sum(1*DResults$d3_q1_real == 1), sum(1*DResults$d3_q1_pred == 0), sum(1*DResults$d3_q1_pred == 1)),
imageType = c("Real CTP", "Real CTP", "Synthetic CTP", "Synthetic CTP"),
voted = c("not real", "is real", "not real" , "is real"))
write.csv(Q1_d1,"Q1_d3.csv", row.names = TRUE)
Q1_d1 <- data.frame(
votes = c(sum(1*DResults$d1_q1_real == 0), sum(1*DResults$d1_q1_real == 1), sum(1*DResults$d1_q1_pred == 0), sum(1*DResults$d1_q1_pred == 1)),
imageType = c("Real CTP", "Real CTP", "Synthetic CTP", "Synthetic CTP"),
voted = c("not real", "is real", "not real" , "is real"))
write.csv(Q1_d1,"Q1_d1.csv", row.names = TRUE)
Q1_d2 <- data.frame(
votes = c(sum(1*DResults$d2_q1_real == 0), sum(1*DResults$d2_q1_real == 1), sum(1*DResults$d2_q1_pred == 0), sum(1*DResults$d2_q1_pred == 1)),
imageType = c("Real CTP", "Real CTP", "Synthetic CTP", "Synthetic CTP"),
voted = c("not real", "is real", "not real" , "is real"))
write.csv(Q1_d2,"Q1_d2.csv", row.names = TRUE)
Q1_d3 <- data.frame(
votes = c(sum(1*DResults$d3_q1_real == 0), sum(1*DResults$d3_q1_real == 1), sum(1*DResults$d3_q1_pred == 0), sum(1*DResults$d3_q1_pred == 1)),
imageType = c("Real CTP", "Real CTP", "Synthetic CTP", "Synthetic CTP"),
voted = c("not real", "is real", "not real" , "is real"))
write.csv(Q1_d3,"Q1_d3.csv", row.names = TRUE)
